/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is GURPS Character Sheet.
 *
 * The Initial Developer of the Original Code is Richard A. Wilkes.
 * Portions created by the Initial Developer are Copyright (C) 1998-2002,
 * 2005-2007 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * ***** END LICENSE BLOCK ***** */

package com.trollworks.gcs.ui.sheet;

import com.trollworks.gcs.ui.common.CSFont;
import com.trollworks.toolkit.text.TKTextDrawing;
import com.trollworks.toolkit.text.TKTextUtility;
import com.trollworks.toolkit.utility.TKAlignment;
import com.trollworks.toolkit.utility.TKFont;
import com.trollworks.toolkit.widget.TKPanel;
import com.trollworks.toolkit.widget.border.TKBoxedDropShadowBorder;
import com.trollworks.toolkit.widget.border.TKCompoundBorder;
import com.trollworks.toolkit.widget.border.TKEmptyBorder;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.util.StringTokenizer;

/** The notes panel. */
public class CSNotesPanel extends TKPanel {
	/** The default action command generated by this panel. */
	public static final String	CMD_EDIT_NOTES	= "EditNotes";	//$NON-NLS-1$
	private static final String	NEWLINE			= "\n";		//$NON-NLS-1$
	private String				mNotes;

	/**
	 * Creates a new {@link CSNotesPanel}.
	 * 
	 * @param notes The notes to display.
	 * @param continued Whether to use the "continued" title or not.
	 */
	public CSNotesPanel(String notes, boolean continued) {
		super();
		setBorder(new TKCompoundBorder(new TKBoxedDropShadowBorder(TKFont.lookup(CSFont.KEY_LABEL), continued ? Msgs.NOTES_CONTINUED : Msgs.NOTES), new TKEmptyBorder(0, 2, 0, 2)));
		setAlignmentY(-1f);
		setEnabled(true);
		setOpaque(true);
		setBackground(Color.white);
		setActionCommand(CMD_EDIT_NOTES);
		setToolTipText(Msgs.NOTES_TOOLTIP);
		mNotes = TKTextUtility.standardizeLineEndings(notes);
	}

	/** @param width The width to wrap at. */
	public void setWrapWidth(int width) {
		mNotes = TKTextDrawing.wrapToPixelWidth(TKFont.lookup(CSFont.KEY_NOTES), null, mNotes, width);
	}

	/**
	 * @param height The maximum height allowed.
	 * @return The remaining text, or <code>null</code> if there isn't any.
	 */
	public String setMaxHeight(int height) {
		StringBuilder buffer = new StringBuilder();
		Insets insets = getInsets();
		int lineHeight = TKTextDrawing.getPreferredSize(TKFont.lookup(CSFont.KEY_NOTES), null, "Mg").height; //$NON-NLS-1$
		StringTokenizer tokenizer = new StringTokenizer(mNotes, NEWLINE, true);
		boolean wasReturn = false;

		height -= insets.top + insets.bottom;
		while (tokenizer.hasMoreTokens()) {
			String token = tokenizer.nextToken();

			if (NEWLINE.equals(token)) {
				if (wasReturn) {
					height -= lineHeight;
				}
				wasReturn = true;
			} else {
				height -= lineHeight;
				wasReturn = false;
			}
			buffer.append(token);
			if (height < lineHeight) {
				boolean hasMore = tokenizer.hasMoreTokens();

				if (hasMore && NEWLINE.equals(tokenizer.nextToken())) {
					buffer.append('\n');
					hasMore = tokenizer.hasMoreTokens();
				}
				if (hasMore) {
					String notes = mNotes.substring(buffer.length());

					mNotes = buffer.toString();
					return notes;
				}
				return null;
			}
		}
		return null;
	}

	@Override protected Dimension getMinimumSizeSelf() {
		Insets insets = getInsets();
		int height = TKTextDrawing.getPreferredSize(TKFont.lookup(CSFont.KEY_NOTES), null, "Mg").height; //$NON-NLS-1$

		return new Dimension(insets.left + insets.right, height + insets.top + insets.bottom);
	}

	@Override protected Dimension getPreferredSizeSelf() {
		Insets insets = getInsets();
		Dimension size = TKTextDrawing.getPreferredSize(TKFont.lookup(CSFont.KEY_NOTES), null, mNotes);

		size.width += insets.left + insets.right;
		size.height += insets.top + insets.bottom;
		return size;
	}

	/** @param notes The notes to display. */
	public void setNotes(String notes) {
		mNotes = notes;
		revalidate();
	}

	@Override protected void paintPanel(Graphics2D g2d, Rectangle[] clips) {
		super.paintPanel(g2d, clips);
		g2d.setFont(TKFont.lookup(CSFont.KEY_NOTES));
		TKTextDrawing.draw(g2d, getLocalInsetBounds(), mNotes, TKAlignment.TOP, TKAlignment.LEFT);
	}

	@Override public void processMouseEventSelf(MouseEvent event) {
		if (event.getID() == MouseEvent.MOUSE_CLICKED) {
			if (event.getClickCount() == 2) {
				notifyActionListeners();
			}
		}
	}
}
