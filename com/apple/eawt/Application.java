/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is GURPS Character Sheet.
 *
 * The Initial Developer of the Original Code is Richard A. Wilkes.
 * Portions created by the Initial Developer are Copyright (C) 1998-2002,
 * 2005-2007 the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * ***** END LICENSE BLOCK ***** */

package com.apple.eawt;

import java.awt.Point;

/**
 * This is a stub implementation that allows non-Apple platforms to compile and run. Other than this
 * paragraph, all remaining comments in this file were copied from Apple's online Java documentation
 * for this class.
 * <p>
 * The Application class allows you to integrate your Java code with the native Mac OS X application
 * environment. In conjunction with the ApplicationEvent and ApplicationHandler classes, you can
 * simply wrap certain native application behaviors and functionality. As a JavaBeans
 * implementation, it provides a mechanism to simply manipulate these features in modern integrated
 * development environments. By implementing the features exposed in this class, and its associated
 * classes, you can provide users with a greatly enhanced user experience on Mac OS X. For example,
 * by implementing the event handlers exposed in this class you are also providing basic AppleScript
 * compatibility that your Java application can be incorporated into Mac OS X workflow solutions
 * that require interapplication communication.
 * <p>
 * Obtain a new Application object if you want to do any of the following tasks
 * <ul>
 * <li>Display an About dialog when a user chooses About from the application menu
 * <li>Open a new, untitled document when the operating system or another application sends an
 * Apple Event for your application to make a new document. As an example, a browser might send a
 * mail viewer an Apple Event to open a new email window.
 * <li>Open a document with your Java application when a user double-clicks it in the Finder
 * <li>Open a preferences window when the users chooses Preferences from the application menu
 * <li>Handle the Print Apple Event that is sent from the operating system or another application
 * <li>Handle the Re-Open Apple Event when sent from the Finder or Dock.
 * <li>Perform specific operations to gracefully close your application when a user chooses Quit
 * from the application menu, Dock icon, or types Command-Q
 * <li>Determine the position of the mouse on-screen
 * </ul>
 * This class permits your Java application to respond Mac OX X-specific Apple events. To use this
 * class:
 * <ol>
 * <li>Obtain an instance of Application.
 * <li>Instantiate one or more objects that implement the ApplicationListener interface. (A
 * convenience class, <code>com.apple.eawt.ApplicationAdaptor</code>, is provided. Create an
 * instance of it for default handling of the events in the ApplicationListener interface).
 * <li>Implement handlers for the appropriate events.
 * <li>Register the ApplicationAdaptor(s) with the Application object.
 * </ol>
 */
public class Application {
	private static Application	sInstance	= null;

	/** Creates an Application. Useful for JavaBean environments. */
	public Application() {
		sInstance = this;
	}

	/** @return A singleton Application. Useful for AWT runtime environments. */
	public static Application getApplication() {
		return sInstance;
	}

	/**
	 * Adds the specified ApplicationListener as a receiver of callbacks from this class.
	 * 
	 * @param listener An implementation of ApplicationListener that handles ApplicationEvents
	 *            generated by this class
	 */
	public void addApplicationListener(@SuppressWarnings("unused") ApplicationListener listener) {
		// Empty, as this is merely a stub...
	}

	/**
	 * Removes the specified ApplicationListener from being a receiver of callbacks from this class.
	 * 
	 * @param listener An implementation of ApplicationListener that had previously been registered
	 *            to handle ApplicationEvents generated by this class
	 */
	public void removeApplicationListener(@SuppressWarnings("unused") ApplicationListener listener) {
		// Empty, as this is merely a stub...
	}

	/**
	 * Enables the Preferences item in the application menu. The ApplicationListener receives a
	 * callback for selection of the Preferences item in the application menu only if this is set to
	 * true. Because an application may not have a preferences window, by default this is set to
	 * false, meaning that the Preferences item in the application menu is grayed out and
	 * unselectable. If a Preferences item isn't present, this method adds and enables it.
	 * 
	 * @param enabled Specifies whether the Preferences item in the application menu should be
	 *            enabled (true) or not (false)
	 */
	public void setEnabledPreferencesMenu(@SuppressWarnings("unused") boolean enabled) {
		// Empty, as this is merely a stub...
	}

	/**
	 * Enables the About item in the application menu. The ApplicationListener receives a callback
	 * for selection of the About item in the application menu only if this is set to true. Because
	 * AWT supplies a standard About window when an application may not, by default this is set to
	 * true. If the About item isn't present, this method adds and enables it.
	 * 
	 * @param enabled Specifies whether the About item in the application menu should be enabled
	 *            (true) or not (false)
	 */
	public void setEnabledAboutMenu(@SuppressWarnings("unused") boolean enabled) {
		// Empty, as this is merely a stub...
	}

	/** @return Whether the Preferences item of the application menu is enabled. */
	public boolean getEnabledPreferencesMenu() {
		return false;
	}

	/** @return Whether the About item of the application menu is enabled. */
	public boolean getEnabledAboutMenu() {
		return false;
	}

	/** @return Whether the About item of the application menu is present. */
	public boolean isAboutMenuItemPresent() {
		return false;
	}

	/**
	 * Adds the About item to the application menu if the item is not already present.
	 */
	public void addAboutMenuItem() {
		// Empty, as this is merely a stub...
	}

	/** Removes the About item from the application menu if the item is present. */
	public void removeAboutMenuItem() {
		// Empty, as this is merely a stub...
	}

	/**
	 * @return Whether the About Preferences of the application menu is present. By default there is
	 *         no Preferences menu item.
	 */
	public boolean isPreferencesMenuItemPresent() {
		return false;
	}

	/** Adds the Preferences item to the application menu if the item is not already present. */
	public void addPreferencesMenuItem() {
		// Empty, as this is merely a stub...
	}

	/** Removes the Preferences item from the application menu if that item is present. */
	public void removePreferencesMenuItem() {
		// Empty, as this is merely a stub...
	}

	/**
	 * Determines the current location of the mouse as a Point within the onscreen viewable area.
	 * 
	 * @return The current position of the mouse on screen
	 */
	public static Point getMouseLocationOnScreen() {
		return null;
	}
}
